import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import config
from database import DatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()
db_manager = DatabaseManager()
scheduler = AsyncIOScheduler()

def get_next_sunday_date() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è"""
    today = datetime.now()
    days_ahead = config.SCHEDULE_DAY - today.weekday()
    if days_ahead <= 0:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏–ª–∏ –ø—Ä–æ—à–ª–æ
        days_ahead += 7
    next_sunday = today + timedelta(days=days_ahead)
    return next_sunday.strftime('%Y-%m-%d')

def get_next_monday_date() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞"""
    today = datetime.now()
    days_ahead = 0 - today.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    if days_ahead <= 0:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏–ª–∏ –ø—Ä–æ—à–ª–æ
        days_ahead += 7
    next_monday = today + timedelta(days=days_ahead)
    return next_monday.strftime('%Y-%m-%d')

def format_participants_list(participants: list, event_date: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    header = f"üìÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ {event_date}\n"
    header += f"üë• –ú–µ—Å—Ç: {len(participants)}/{config.MAX_PARTICIPANTS}\n\n"
    
    if not participants:
        return header + "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ù–∞–∂–º–∏—Ç–µ '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å' —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è!"
    
    participants_text = ""
    for i, (user_id, username, first_name, last_name, position) in enumerate(participants, 1):
        name = f"{first_name or ''} {last_name or ''}".strip()
        if username:
            name = f"@{username}" if not name else f"{name} (@{username})"
        elif not name:
            name = f"User {user_id}"
        
        participants_text += f"{position}. {name}\n"
    
    return header + participants_text

def get_participation_keyboard(event_date: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", 
                callback_data=f"join:{event_date}"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", 
                callback_data=f"leave:{event_date}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
                callback_data=f"refresh:{event_date}"
            )
        ]
    ])

async def send_weekly_list():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    try:
        event_date = get_next_sunday_date()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = format_participants_list([], event_date)
        keyboard = get_participation_keyboard(event_date)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await bot.send_message(
            chat_id=config.CHAT_ID,
            text=text,
            reply_markup=keyboard
        )
        
        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —ç—Ç–∞ –æ–ø—Ü–∏—è
        if config.PIN_MESSAGE:
            try:
                await bot.pin_chat_message(
                    chat_id=config.CHAT_ID,
                    message_id=message.message_id,
                    disable_notification=not config.PIN_NOTIFICATION
                )
                logger.info(f"Message pinned for {event_date}")
            except Exception as pin_error:
                logger.warning(f"Failed to pin message: {pin_error}")
                logger.warning("Bot might not have admin rights to pin messages")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db_manager.create_event(event_date, message.message_id)
        
        logger.info(f"Weekly list sent for {event_date}")
        
    except Exception as e:
        logger.error(f"Error sending weekly list: {e}")

async def keep_alive_ping():
    """–ü–∏–Ω–≥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API"""
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        bot_info = await bot.get_me()
        logger.debug(f"Keep-alive ping successful - Bot: @{bot_info.username}")
    except Exception as e:
        logger.warning(f"Keep-alive ping failed: {e}")
        # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É

@dp.callback_query(F.data.startswith("join:"))
async def handle_join(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ"""
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –±—ã—Å—Ç—Ä–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞
        await callback.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å...")
        
        if not callback.data or not callback.message:
            await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        event_date = callback.data.split(":")[1]
        user = callback.from_user
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        event = await db_manager.get_event_by_date(event_date)
        if not event:
            await callback.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        event_id = event[0]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        success, position = await db_manager.add_participant(
            event_id=event_id,
            user_id=user.id,
            username=user.username or "",
            first_name=user.first_name or "",
            last_name=user.last_name or ""
        )
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = await db_manager.get_participants(event_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = format_participants_list(participants, event_date)
            keyboard = get_participation_keyboard(event_date)
            
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard
            )
            
            await callback.answer(f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {position}!")
            
        elif position == -1:
            await callback.answer("–°–ø–∏—Å–æ–∫ –ø–æ–ª–æ–Ω!", show_alert=True)
        else:
            await callback.answer(f"–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {position}")
            
    except Exception as e:
        logger.error(f"Error in handle_join: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data.startswith("leave:"))
async def handle_leave(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç —É—á–∞—Å—Ç–∏—è"""
    try:
        await callback.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å...")
        
        if not callback.data or not callback.message:
            await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        event_date = callback.data.split(":")[1]
        user = callback.from_user
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        event = await db_manager.get_event_by_date(event_date)
        if not event:
            await callback.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        event_id = event[0]
        
        # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        success = await db_manager.remove_participant(event_id, user.id)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = await db_manager.get_participants(event_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = format_participants_list(participants, event_date)
            keyboard = get_participation_keyboard(event_date)
            
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard
            )
            
            await callback.answer("–í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞!")
        else:
            await callback.answer("–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
            
    except Exception as e:
        logger.error(f"Error in handle_leave: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data.startswith("refresh:"))
async def handle_refresh(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞"""
    try:
        await callback.answer("–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫...")
        
        if not callback.data or not callback.message:
            await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        event_date = callback.data.split(":")[1]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        event = await db_manager.get_event_by_date(event_date)
        if not event:
            await callback.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        event_id = event[0]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = await db_manager.get_participants(event_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = format_participants_list(participants, event_date)
        keyboard = get_participation_keyboard(event_date)
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error in handle_refresh: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç"""
    await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 21:00")

@dp.message(Command("test"))
async def cmd_test(message: types.Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"""
    if message.chat.id == config.CHAT_ID:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
            event_date = get_next_monday_date()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text = format_participants_list([], event_date)
            keyboard = get_participation_keyboard(event_date)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_message = await message.answer(
                text=text,
                reply_markup=keyboard
            )
            
            # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —ç—Ç–∞ –æ–ø—Ü–∏—è
            if config.PIN_MESSAGE:
                try:
                    await bot.pin_chat_message(
                        chat_id=config.CHAT_ID,
                        message_id=test_message.message_id,
                        disable_notification=not config.PIN_NOTIFICATION
                    )
                    logger.info(f"Test message pinned for {event_date}")
                except Exception as pin_error:
                    logger.warning(f"Failed to pin test message: {pin_error}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await db_manager.create_event(event_date, test_message.message_id)
            
            await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            
        except Exception as e:
            logger.error(f"Error sending test list: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞")
    else:
        await message.answer(
            f"‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º —á–∞—Ç–µ!\n"
            f"–¢–µ–∫—É—â–∏–π —á–∞—Ç: {message.chat.id}\n"
            f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —á–∞—Ç: {config.CHAT_ID}\n\n"
            f"–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {config.CHAT_ID}"
        )

@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    try:
        bot_info = await bot.get_me()
        status_text = f"ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**\n\n"
        status_text += f"üë§ –ò–º—è: {bot_info.first_name}\n"
        status_text += f"üÜî Username: @{bot_info.username}\n"
        status_text += f"üÜî ID: `{bot_info.id}`\n\n"
        status_text += f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' if db_manager else '‚ùå –û—à–∏–±–∫–∞'}\n"
        status_text += f"‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if scheduler.running else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        status_text += f"üîÑ Keep-alive: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if config.KEEP_ALIVE else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\n"
        
        if config.KEEP_ALIVE:
            status_text += f"‚ö° –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ: {config.PING_INTERVAL} —Å–µ–∫\n"
        
        status_text += f"\nüìÖ –°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, {config.SCHEDULE_HOUR}:00"
        
        await message.answer(status_text, parse_mode="Markdown")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

@dp.message(Command("ping"))  
async def cmd_ping(message: types.Message):
    """–†—É—á–Ω–æ–π –ø–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏"""
    try:
        await keep_alive_ping()
        await message.answer("üèì Pong! –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db_manager.init_database()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.add_job(
        send_weekly_list,
        trigger=CronTrigger(
            day_of_week=config.SCHEDULE_DAY,
            hour=config.SCHEDULE_HOUR,
            minute=config.SCHEDULE_MINUTE
        ),
        id="weekly_list",
        replace_existing=True
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if config.KEEP_ALIVE:
        scheduler.add_job(
            keep_alive_ping,
            "interval",
            seconds=config.PING_INTERVAL,
            id="keep_alive",
            replace_existing=True
        )
        logger.info(f"Keep-alive ping enabled (every {config.PING_INTERVAL}s)")
    
    scheduler.start()
    logger.info("Scheduler started")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("Bot starting...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 