#!/usr/bin/env python3
"""
–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ Telegram –±–æ—Ç–∞
"""

import asyncio
import time
from database import DatabaseManager
import config

class StressTest:
    def __init__(self):
        self.db_manager = DatabaseManager()
        
    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
        await self.db_manager.init_database()
        test_date = f"stress-test-{int(time.time())}"
        self.event_id = await self.db_manager.create_event(test_date, 99999)
        return self.event_id
        
    async def simulate_user_join(self, user_id: int):
        """–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        start_time = time.time()
        
        try:
            success, position = await self.db_manager.add_participant(
                event_id=self.event_id,
                user_id=user_id,
                username=f"stress_user{user_id}",
                first_name=f"Stress",
                last_name=f"User{user_id}"
            )
            
            end_time = time.time()
            duration = end_time - start_time
            
            return {
                'user_id': user_id,
                'success': success,
                'position': position,
                'duration': duration,
                'error': None
            }
        except Exception as e:
            end_time = time.time()
            duration = end_time - start_time
            return {
                'user_id': user_id,
                'success': False,
                'position': -1,
                'duration': duration,
                'error': str(e)
            }
    
    async def run_stress_test(self, num_users: int):
        """–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞"""
        print(f"\nüî• –°–¢–†–ï–°–°-–¢–ï–°–¢: {num_users} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("=" * 60)
        
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        tasks = [self.simulate_user_join(i) for i in range(1, num_users + 1)]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        end_time = time.time()
        total_duration = end_time - start_time
        
        return results, total_duration
    
    async def analyze_stress_results(self, results, total_duration, num_users):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞"""
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–¢–†–ï–°–°-–¢–ï–°–¢–ê ({num_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
        print("=" * 60)
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.3f} —Å–µ–∫")
        print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {num_users / total_duration:.1f} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        valid_results = [r for r in results if isinstance(r, dict)]
        exceptions = [r for r in results if not isinstance(r, dict)]
        
        if exceptions:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–π: {len(exceptions)}")
        
        successful = [r for r in valid_results if r['success']]
        failed = [r for r in valid_results if not r['success']]
        errors = [r for r in valid_results if r['error']]
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(successful)}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(failed)}")
        print(f"üêõ –û—à–∏–±–æ–∫: {len(errors)}")
        
        if successful:
            durations = [r['duration'] for r in successful]
            print(f"\n‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {sum(durations)/len(durations):.3f} —Å–µ–∫")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {max(durations):.3f} —Å–µ–∫")
            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {min(durations):.3f} —Å–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
        participants = await self.db_manager.get_participants(self.event_id)
        count = len(participants)
        
        print(f"\nüíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   –ó–∞–ø–∏—Å–µ–π –≤ –ë–î: {count}")
        print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {min(len(successful), config.MAX_PARTICIPANTS)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if count <= config.MAX_PARTICIPANTS:
            print("   ‚úÖ –õ–∏–º–∏—Ç —Å–æ–±–ª—é–¥–µ–Ω")
        else:
            print("   ‚ö†Ô∏è  –ü–†–ï–í–´–®–ï–ù –õ–ò–ú–ò–¢!")
        
        user_ids = [p[0] for p in participants]
        if len(set(user_ids)) == len(user_ids):
            print("   ‚úÖ –ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
        else:
            print("   ‚ùå –ï–°–¢–¨ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï!")
        
        return {
            'total_time': total_duration,
            'requests_per_sec': num_users / total_duration,
            'successful': len(successful),
            'failed': len(failed),
            'errors': len(errors),
            'db_records': count
        }

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    test = StressTest()
    results_summary = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏
    test_loads = [50, 100, 200, 500, 1000]
    
    print("üöÄ –ó–ê–ü–£–°–ö –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø TELEGRAM –ë–û–¢–ê")
    print("=" * 60)
    
    for num_users in test_loads:
        try:
            # –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
            await test.setup()
            
            results, duration = await test.run_stress_test(num_users)
            summary = await test.analyze_stress_results(results, duration, num_users)
            
            results_summary.append({
                'users': num_users,
                **summary
            })
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await asyncio.sleep(1)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å {num_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            continue
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìà –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    
    print(f"{'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':<12} {'–í—Ä–µ–º—è':<8} {'–ó–∞–ø—Ä/—Å–µ–∫':<10} {'–£—Å–ø–µ—à–Ω–æ':<9} {'–û—à–∏–±–æ–∫':<8} {'–í –ë–î':<6}")
    print("-" * 60)
    
    max_successful_load = 0
    max_rps = 0
    
    for result in results_summary:
        print(f"{result['users']:<12} {result['total_time']:<8.2f} "
              f"{result['requests_per_sec']:<10.1f} {result['successful']:<9} "
              f"{result['errors']:<8} {result['db_records']:<6}")
        
        if result['errors'] == 0 and result['successful'] > 0:
            max_successful_load = max(max_successful_load, result['users'])
        
        max_rps = max(max_rps, result['requests_per_sec'])
    
    print("\nüèÜ –í–´–í–û–î–´:")
    print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ –æ—à–∏–±–æ–∫: {max_successful_load} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {max_rps:.1f} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫")
    print(f"   –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {config.MAX_PARTICIPANTS}")
    
    if max_successful_load >= 100:
        print("   ‚úÖ –ë–æ—Ç –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π!")
    elif max_successful_load >= 50:
        print("   ‚úÖ –ë–æ—Ç —Ö–æ—Ä–æ—à–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –Ω–∞–≥—Ä—É–∑–∫–æ–π!")
    else:
        print("   ‚ö†Ô∏è  –ë–æ—Ç –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –Ω–∞–≥—Ä—É–∑–∫–µ")

if __name__ == "__main__":
    asyncio.run(main()) 